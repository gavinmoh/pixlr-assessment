Parameters:
  EnvironmentName:
    Description: An environment name to identify the resources
    Type: String

  SNSEmail:
    Description: Email address to notify for cloudwatch alarms
    Type: String
    AllowedPattern: "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}"

  SSHAllowedIP:
    Description: The IP address range that can be used to SSH to the EC2 instance
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

  InstanceType:
    Description: Instance type for the EC2 instance
    Type: String
    Default: t2.micro
    AllowedValues:
         - t2.micro
         - t3.small
         - t3.medium
         - m5.large
         - m5.xlarge

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 192.168.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet
    Type: String
    Default: 192.168.111.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet
    Type: String
    Default: 192.168.222.0/24

  CustomHeaderValue:
    Description: Custom header value in order to restrict the access of ALB from CloudFront only
    Type: String
    Default: 'CloudFront'

Resources:
  # Challenge 0
  # this part is to setup the underlying VPC related resources
  # VPC, Subnet, Internet Gateway, Route Table, Route Table Association
  # this is just to ensure that the EC2 instance won't be created in the default VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet 1 (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet 2 (AZ2)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Challenge 1: Infrastructure as Code
  # this part is to setup the EC2 instance and security group
  # as well as other resources for scaling and security
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and SSH access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref ApplicationLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHAllowedIP
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Security Group

  EC2KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub ${EnvironmentName}-KeyPair

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-ASG
      AvailabilityZones:
        - !Select [ 0, !GetAZs '' ]
        - !Select [ 1, !GetAZs '' ]
      Cooldown: '300'
      DefaultInstanceWarmup: '60'
      LaunchTemplate:
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
        LaunchTemplateId: !Ref LaunchTemplate
      MinSize: '2'
      MaxSize: '6'
      DesiredCapacity: '2'
      VPCZoneIdentifier:
           - !Ref PublicSubnet1
           - !Ref PublicSubnet2
      TargetGroupARNs:
        - !Ref TargetGroup
      MetricsCollection:
           - Granularity: '1Minute'
      # use ELB health check instead of EC2 so that 
      # the instance will be replaced if the web app is not healthy
      HealthCheckType: ELB 

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName}-LaunchTemplate
      LaunchTemplateData:
        ImageId: '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64}}'
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        KeyName: !Ref EC2KeyPair
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        UserData:
          Fn::Base64: |
            #!/bin/bash

            # install cloudwatch-agent
            rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm

            # create the config file
            cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json <<EOF
            {
              "agent": {
                "metrics_collection_interval": 60,
                "run_as_user": "cwagent"
              },
              "metrics": {
                "aggregation_dimensions": [["AutoScalingGroupName"]],
                "append_dimensions": {
                  "AutoScalingGroupName": "\${aws:AutoScalingGroupName}",
                  "ImageId": "\${aws:ImageId}",
                  "InstanceId": "\${aws:InstanceId}",
                  "InstanceType": "\${aws:InstanceType}"
                },
                "metrics_collected": {
                  "disk": {
                    "measurement": [{"name": "used_percent", "unit": "percent", "rename": "DiskUtilization"}],
                    "metrics_collection_interval": 60,
                    "resources": ["/", "/tmp"]
                  },
                  "mem": {
                    "measurement": [{"name": "mem_used_percent", "unit": "percent", "rename": "MemoryUtilization"}],
                    "metrics_collection_interval": 60
                  },
                  "swap": {
                    "measurement": [{"name": "swap_used_percent", "unit": "percent", "rename": "SwapUtilization"}],
                    "metrics_collection_interval": 60
                  }
                }
              }
            }
            EOF

            # start the service
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s

            # install apache
            yum update -y
            yum install -y httpd

            # start apache
            systemctl enable http
            systemctl start httpd

            # Create a simple index.html file
            TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
            INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id -H "X-aws-ec2-metadata-token: $TOKEN")
            echo "<h1>Hello from $INSTANCE_ID</h1>" > /var/www/html/index.html
  
  # scale based on ALB request count
  TargetTrackingScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    DependsOn: ApplicationLoadBalancerListener
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        TargetValue: 1000
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel: !Join [ '/', [!GetAtt ApplicationLoadBalancer.LoadBalancerFullName, !GetAtt TargetGroup.TargetGroupFullName] ]

  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
  
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-ALB
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ApplicationLoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} ALB
      
  
  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        # block the access if the custom header value is not matched
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: '404'
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ApplicationLoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: X-Custom-Header
            Values:
              - !Ref CustomHeaderValue
      ListenerArn: !Ref ApplicationLoadBalancerListener
      Priority: 1

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  # uncomment this part if you want to associate the WebACL with the CloudFront distribution
  # the web acl with CLOUDFRONT scope is only available in us-east-1
  # if you're deploying this stack in other regions, you need to create the WebACL separately
  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      DefaultAction:
        Allow: {}
      Description: Web ACL for ALB
      Name: !Sub ${EnvironmentName}-WebACL
      Scope: CLOUDFRONT
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        MetricName: !Sub ${EnvironmentName}-WebACL
        SampledRequestsEnabled: true
      Rules:
        - Name: AWS-CommonRule
          Priority: 0
          OverrideAction:
            None: {}
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: AWS-CommonRule
            SampledRequestsEnabled: true
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
        - Name: AWS-BotControl
          Priority: 1
          OverrideAction:
            None: {}
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: AWS-BotControl
            SampledRequestsEnabled: true
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesBotControlRuleSet
        - Name: AWS-SQLInjection
          Priority: 2
          OverrideAction:
            None: {}
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: AWS-SQLInjection
            SampledRequestsEnabled: true
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesSQLiRuleSet
              
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt ApplicationLoadBalancer.DNSName
            Id: !Ref EnvironmentName
            CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: http-only
            OriginCustomHeaders:
                 - HeaderName: X-Custom-Header
                   HeaderValue: !Ref CustomHeaderValue
        Enabled: 'true'
        DefaultCacheBehavior:
          TargetOriginId: !Ref EnvironmentName
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized Policy managed by AWS
        PriceClass: PriceClass_All
        # only uncomment this part if you want to associate the WebACL with the CloudFront distribution
        WebACLId: !GetAtt WebACL.Arn

  # Challenge 2: Monitoring Integration
  # this part is to setup the CloudWatch alarms and SNS for notification
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Sub ${SNSEmail}
          Protocol: email

  CPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'Alarm if CPU > 70% for 10 minutes'
      Namespace: 'AWS/EC2'
      MetricName: 'CPUUtilization'
      Dimensions:
        - Name: 'AutoScalingGroupName'
          Value: !Ref AutoScalingGroup
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '70'
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref SNSTopic

  MemoryUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'Alarm if Memory > 80% for 10 minutes'
      Namespace: 'CWAgent'
      MetricName: 'MemoryUtilization'
      Dimensions:
        - Name: 'AutoScalingGroupName'
          Value: !Ref AutoScalingGroup
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '80'
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref SNSTopic

  DiskUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'Alarm if Disk > 80% for 10 minutes'
      Namespace: 'CWAgent'
      MetricName: 'DiskUtilization'
      Dimensions:
        - Name: 'AutoScalingGroupName'
          Value: !Ref AutoScalingGroup
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '80'
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref SNSTopic

  NetworkOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'Alarm if NetworkOut > 50MB/minute for 10 minutes'
      Namespace: 'AWS/EC2'
      MetricName: 'NetworkOut'
      Dimensions:
        - Name: 'AutoScalingGroupName'
          Value: !Ref AutoScalingGroup
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '50000000'
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref SNSTopic

  # Challenge 3: Security Basics
  # this part is to setup the S3 bucket, bucket policy
  # instance role and instance profile for the EC2 instance
  # VPCEndpoint for accessing the S3 bucket privately
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      # unique bucket name using environment name and stack id
      BucketName: !Join [ "-", [ !Ref EnvironmentName, !Select [2, !Split ['/', !Ref AWS::StackId]] ] ]
      # we can retain the bucket if needed
      # NOTE: to delete the bucket, we need to empty the bucket first
      # otherwise, the bucket will be retained after the stack deletion
      # DeletionPolicy: Retain 
      VersioningConfiguration:
        Status: Enabled
  
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Effect: Deny
            Principal: 
              AWS: !GetAtt InstanceRole.Arn
            Action:
              - 's3:ListBucket'
              - 's3:GetObject'
            Resource: 
              - !GetAtt S3Bucket.Arn
              - !Join ['/', [!GetAtt S3Bucket.Arn, '*']]
            Condition:
              StringNotEquals:
                aws:SourceVpce: !Ref S3EndPoint
                
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        # this part is to allow the EC2 instance to use CloudWatch agent
        # which is required in Challenge 2
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy 
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - 's3:ListBucket'
                  - 's3:GetObject'
                Resource:
                  - !GetAtt S3Bucket.Arn
                  - !Join ['/', [!GetAtt S3Bucket.Arn, '*']]

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  S3EndPoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      RouteTableIds:
        - !Ref PublicRouteTable

  
Outputs:
  S3BucketName:
    Description: The name of the S3 bucket
    Value: !Ref S3Bucket
  
  CloudFrontDistributionDomainName:
    Description: The domain name of the CloudFront distribution
    Value: !GetAtt CloudFrontDistribution.DomainName